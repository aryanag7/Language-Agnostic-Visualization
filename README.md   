# üìä Language Agnostic Visualization Web Application

This web application allows users to generate static, interactive, and 3D visualizations using custom code written in **Python** or **R**. The app takes user input, dynamically executes it on the backend, and renders the resulting graph on the frontend.

---

## üõ†Ô∏è Tools & Technologies Used

### Frontend:
- **Angular 18+**
- **TypeScript**
- **Custom Components**: Language Selector, Code Editor etc.
- **Responsive UI** with CSS

### Backend:
- **Node.js** with **Express**
- **Python** (via Virtual Environment)
  - `matplotlib`, `plotly`
- **R**
  - `ggplot2`, `plotly`, `htmlwidgets`

---

## üîß Functionality

- Select a language (Python or R)
- Enter code to generate a visualization
- Supports:
  - Static images (`.png`)
  - Interactive HTML charts (`.html`)
  - 3D plots (via Plotly)
- View the chart directly in the browser
- **Download Chart** option available

---

## üêû Issues Encountered & Resolutions


### 1. **HTML Output Not Displaying**
- **Issue**: Interactive `.html` plots wouldn‚Äôt render in Angular.
- **Solution**: Used `DomSanitizer` in Angular and an `<iframe>` to safely embed HTML charts.

### 2. **Server Crashing on Invalid Code**
- **Issue**: Backend would crash or hang on invalid scripts.
- **Solution**: Wrapped script execution in `try/catch` with detailed error handling and user feedback.

### 3. **Server Crashing on R Plot Generation**
-  **Issue**: When generating R visualizations, the server would restart unexpectedly. This was due to nodemon detecting changes in the temporary directory where R scripts and outputs were being written.
- **Solution**: Configured nodemon to ignore the tmp/ folder using a nodemon.json file. This prevented auto-restarts caused by file writes in that directory.

### 4. **UI Alignment & Overflow**
- **Issue**: UI components were misaligned or text overflowed on smaller screens.
- **Solution**: Refactored CSS for better responsiveness and clean layout.

---

## ‚úÖ Status

The app supports all major functionalities as required, with support for:
- Static visualizations (matplotlib, ggplot2)
- Interactive plots (plotly)
- 3D plots (Plotly 3D support)

---

## üöÄ Future Improvements

- Support More Languages: Extend support beyond Python and R to include languages like JavaScript (e.g., D3.js), Julia, or MATLAB for broader visualization capabilities.
- Chart Gallery / Templates: Offer prebuilt chart templates to quickly generate common visualizations with minimal input.
- Live Collaboration: Implement real-time collaboration where multiple users can co-edit and generate plots simultaneously.
- Export Options: Add support to export visualizations as PDF, SVG, or directly to cloud storage like Google Drive.